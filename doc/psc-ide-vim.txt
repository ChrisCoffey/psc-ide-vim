PureScript psc ide integration			      *psc-ide-vim* *purs*

COMPLETION					      *purs-completion*
The plugin provides omni completion |i_CTRL-X_CTRL-O| for your PureScript
coding and user completion so you can complete with |i_CTRL-X_CTRL-U| too.
The 'omnifunc' is though to provide as tight list of results as possible,
while the user completion is though to find as many results as possible.

Both completion function will work with qualified and unqualified
indentifiers.

Also many of the commands can be completed.

PURS SERVER COMMANDS				      *purs-server-commands*

						      *:Plist*
>
 :Plist
<List loaded modules.
						      *:Pload*
>
 :Pload[!]
<Load externs, with optional |<bang>|, first reset loaded modules.

						      *:Pcwd*
>
 :Pcwd
<Show current working directory.
						      *:Pend*
>
 :Pend
<Shut down the server.
						      *:Prebuild*
>
 :Prebuild[!]
<Rebuild current buffer, with optional |<bang>| first reload the modules.

EDITING COMMANDS				      *purs-editing-commands*

						      *:PaddClause*
>
 :PaddClause
<Generate function template from a function signature on the current line.

						      *:PaddType*
>
 :PaddType
<Add type annotation to a function on the current line, e.g. if you use this
command over the line
>
    concat :: forall a b. Show a => Show b => a -> b -> String
<
It will produce:
>
    concat :: forall a b. Show a => Show b => a -> b -> String
    concat _ _ = ?concat
<

						      *:Papply*
>
 :Papply[!]
<Apply current line suggestion if there is any.  With |<bang>| applies all
suggestions.  Warning that have suggestion are indicated with 'V' in the quick
fix list.

						      *:Pcase*
>
 :Pcase[!] type
<Add case expression for give type, with optional |<bang>| it will also
include type annotations, e.g. starting with
>
    myCase :: Either String Int -> String
    myCase _ = ?s<  -- cursor over `_`

then using `:Pcase Either String Int` and will put
>
  myCase :: Either String Int -> String
  myCase (Left _) = ?s
  myCase (Right _) = ?s
<It also works over case expressions:
>
  myCase :: Either String Int -> String
  myCase a = case a of
    _ -> ?s -- cursor over `_`
<will result with
>
  myCase :: Either String Int -> String
  myCase a = case a of
    (Left _) -> ?s
    (Right _) -> ?s
<
IMPORT COMMANDS					      *purs-import-commands*

						      *:Pimport*
>
 :Pimport [ident]
<Import identifier. It might be qualified if you have qualified imports.  If
identifier is not given as an argument the word under the cursro is taken.
The identifier can be qualified, i.e. `List.length` then the qualifier will be
preserved.  If there is already a module imported with the same qualified the
new import will be added to that import declaration.

						      *:PimportModule*
>
 :PimportModule ident [qualificier]
<Import module (possibly as qualificied module).
						      *:Pimports*
>
 :Pimports
<List imports.

						      *:PaddImportQualifications*
>
 :PaddImportQualifications
<

SEARCH COMMANDS					      *purs-search-commands*

						      *:Pgoto*
>
 :Pgoto [ident]
<Goto identifier.  You can use qualified identifiers if you have qualified
imports. If identifier is not given the word under the cursor is taken.

						      *:Pursuit*
>
 :Pursuit [ident]
<Search pursuit for ident.  If not present the word under the cursor is taken.

						      *:Ptype*
>
 :Ptype[!] [ident]
<Find type of ident.  If ident is not given the wrod under the cursor is
taken.

						      *:Psearch*
>
 :Psearch ident
<Search for identifier.  This works like the provided 'omnifunc', but with
less filtering.
<

SETTINGS                                *purs-settings*

>
 g:psc_ide_log_level [ident]
<Controls the verbosity of debug output.
  0 =       no output
  1 =       less output
  2 =       more output
  3 =       debug outupt

  default is 0
>
 g:psc_ide_server_port [ident]
<Use an alternative port for 'purs ide server'. The default is 4242
>
 g:psc_ide_check_output_dir [ident]
<Used for project validation, this checks whether the project has been built yet. The
default is 1 (True)
>

 g:psc_ide_notify [ident]
<Prints additional logging information about calls to 'purs ide server'. Default is true
>

g:psc_ide_filter_prelude_modules [ident]
<Filters out
>

g:psc_ide_omnicompletion_filter_modules [ident]
<Performs the 'omnicomplete' search only against the currently imported set of modules.
Default is false
>

g:psc_ide_omnicompletion_sort_by [ident]
<Determins the sort order of the 'omnicomplete' results. Must be one of the following:
  flex          default sort
  module        compares on module name
  identifier    compares on the identifier name

  default is flex
>

g:psc_ide_import_on_completion [ident]
<Import identifiers on completion callback. Default is true
>

g:psc_ide_omnicompletion_prefix_filter [ident]
<Allows purs ide to filter by prefix, disabling flex matching. Default is true.
>

g:psc_ide_server_runner [ident]
<Allows using project-local or sandboxed versions of 'purs ide server' by appending a prefix. For
example, 'yarn --silent' if using a project-dependent version + yarn. Default is []
>

g:psc_ide_filter_submodules [ident]
<Hides submodules. Default is false
>

g:psc_ide_filter_submodules_do_not_hide [ident]
<A list of submodules that should not be hidden by 'g:psc_ide_filter_submodules'
>

